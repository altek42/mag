@book{EngineeringCompiler,
abstract = {Overview Scanning Parsing Context-Sensitive Analysis Intermediate Representations The Procedure Abstraction Code Shape Introduction to Code Optimization Data-Flow Analysis Scalar Optimizations Instruction Selection Instruction Scheduling Register Allocation ILOC Data Structures},
booktitle = {Engineering a Compiler},
doi = {10.1016/C2009-0-27982-7},
isbn = {9780120884780},
publisher = {Elsevier},
title = {Engineering a Compiler},
url = {https://linkinghub.elsevier.com/retrieve/pii/C20090279827},
year = {2012}
}

@incollection{Mckeeman1974,
abstract = {A compiler is a program, written in an implementation language, accepting text in a source language and producing text in a target language. Language description languages are used to define all of these languages and themselves as well. The source language is an algorithmic language to be used by programmers. The target language is suitable for execution by some particular computer.},
author = {Mckeeman, W. M.},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-662-21549-4_1},
isbn = {9783540069584},
issn = {16113349},
pages = {1--36},
title = {Compiler Construction},
url = {http://link.springer.com/10.1007/978-3-662-21549-4_1},
year = {1974}
}

@article{Smith2005,
abstract = {Interjecting virtualizing software between abstraction layers near the hardware/software interface forms a virtual machine that lets otherwise incompatible subsystems work together. Further, replication by virtualization enables more flexible and efficient use of hardware resources. Given developers' heavy reliance on standards and computer industry consolidation, any major innovation will likely be based on VM technology. In the future, VMs should be viewed as a unified discipline to the same degree that hardware, operating systems, and application software are today. {\textcopyright} 2005 IEEE.},
author = {Smith, J.E. and {Ravi Nair}},
doi = {10.1109/MC.2005.173},
issn = {0018-9162},
journal = {Computer},
month = {may},
number = {5},
pages = {32--38},
title = {{The architecture of virtual machines}},
url = {http://ieeexplore.ieee.org/document/1430629/},
volume = {38},
year = {2005}
}

@manual{aboutJS,
  title  = {About JavaScript},
  author = {MDN contributors},
  url = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/About_JavaScript},
  month = {may},
  year = "2020 (dostępny Maj 28, 2020)"
}

@book{EloquentJavaScript,
abstract = {JavaScript is at the heart of almost every modern Web application, whether it's Google Apps, Twitter, or the newest browser-based game. Though it's simple for beginners to pick up and play with, JavaScript is not a toy—it's a flexible and complex language that can be used to build full-scale applications.Eloquent JavaScript dives into this flourishing language and teaches you to write code that's beautiful and effective. By immersing you in example code and encouraging experimentation right from the start, the author quickly gives you the tools you need to build your own programs. As you follow along with examples like an artificial life simulation and a version of the classic game Sokoban, you'll learn to:* Understand the essential elements of programming: syntax, control, and data* Use object-oriented and functional programming techniques to organize and clarify your programs* Script the browser and make basic Web applications* Work with tools like regular expressions and XMLHttpRequest objectsAnd since programming is an art that's best learned by doing, all example code is available online in an interactive sandbox for you to experiment with. With Eloquent JavaScript as your guide, you can tweak, expand, and modify the author's code, or throw it away and build your own creations from scratch. Before you know it, you'll be fluent in the language of the Web.},
author = {Haverbeke, Marijn},
booktitle = {Eloquent JavaScript},
doi = {10.1190/1.9781560801597},
isbn = {1593272820},
issn = {1460-2377},
keywords = {a modern introduction to,programming,quent javascript},
pmid = {22745350},
title = {{Eloquent JavaScript: A Modern Introduction to Programming}},
year = {2011}
}

@book{BeginningJavaScript,
abstract = {Mycotoxins are small (MW approximately 700), toxic chemical products formed as secondary metabolites by a few fungal species that readily colonise crops and contaminate them with toxins in the field or after harvest. Ochratoxins and Aflatoxins are mycotoxins of major significance and hence there has been significant research on broad range of analytical and detection techniques that could be useful and practical. Due to the variety of structures of these toxins, it is impossible to use one standard technique for analysis and/or detection. Practical requirements for high-sensitivity analysis and the need for a specialist laboratory setting create challenges for routine analysis. Several existing analytical techniques, which offer flexible and broad-based methods of analysis and in some cases detection, have been discussed in this manuscript. There are a number of methods used, of which many are lab-based, but to our knowledge there seems to be no single technique that stands out above the rest, although analytical liquid chromatography, commonly linked with mass spectroscopy is likely to be popular. This review manuscript discusses (a) sample pre-treatment methods such as liquid-liquid extraction (LLE), supercritical fluid extraction (SFE), solid phase extraction (SPE), (b) separation methods such as (TLC), high performance liquid chromatography (HPLC), gas chromatography (GC), and capillary electrophoresis (CE) and (c) others such as ELISA. Further currents trends, advantages and disadvantages and future prospects of these methods have been discussed.},
author = {Ferguson, Russ},
booktitle = {Beginning JavaScript},
doi = {10.1007/978-1-4842-4395-4},
isbn = {978-1-4842-4395-4},
title = {{Beginning JavaScript}},
year = {2019}
}



@misc{Node.js2017,
abstract = {As an asynchronous event driven JavaScript runtime, Node is designed to build scalable network applications.},
author = {Node.js},
booktitle = {2017 Node.js Foundation},
title = {{About | Node.js}},
year = {2017}
}

@article{Tilkov2010,
abstract = {One of the more interesting developments recently gaining popularity in the server-side JavaScript space is Node.js. It's a framework for developing high-performance, concurrent programs that don't rely on the mainstream multithreading approach but use asynchronous I/O with an event-driven programming model. {\textcopyright} 2006 IEEE.},
author = {Tilkov, Stefan and Vinoski, Steve},
doi = {10.1109/MIC.2010.145},
issn = {1089-7801},
journal = {IEEE Internet Computing},
keywords = {Internet,JavaScript,Node,Node.js,Web development,functional programming},
month = {nov},
number = {6},
pages = {80--83},
title = {{Node.js: Using JavaScript to Build High-Performance Network Programs}},
url = {http://ieeexplore.ieee.org/document/5617064/},
volume = {14},
year = {2010}
}

@manual{dotNetCLS,
  title  = {Common Type System \& Common Language Specification},
  author = {MDN contributors},
  url = {https://docs.microsoft.com/en-us/dotnet/standard/common-type-system},
  month = {june},
  year = "2016 (dostępny Lipiec 6, 2020)"
}


@manual{dotNetCLR,
  title  = {Common Language Runtime (CLR) overview},
  author = {MDN contributors},
  url = {https://docs.microsoft.com/pl-pl/dotnet/standard/clr},
  month = {april},
  year = "2019 (dostępny Lipiec 6, 2020)"
}


@manual{dotNetFCL,
  title  = {.NET FCL (Framework Class Library)},
  author = {HOW TO ASP.NET},
  url = {https://www.howtoasp.net/net-fcl-framework-class-library/},
  year = "(dostępny Lipiec 6, 2020)"
}


@manual{dotNetvsFramework,
  title  = {.NET Core vs .NET Framework},
  author = {Paweł Łukasiewicz},
  url = {https://www.plukasiewicz.net/Artykuly/NetFrameworkVsNetCore},
  year = "(dostępny Lipiec 6, 2020)"
}


@manual{ILAsm1,
  title  = {Introduction to IL Assembly Language},
  author = {Sameers Javed},
  url = {https://www.codeproject.com/Articles/3778/Introduction-to-IL-Assembly-Language},
  month = {april},
  year = "2003 (dostępny Lipiec 8, 2020)"
}

@manual{AntlrLexRules,
  title        = {Lexer rules in v4},
  author       = {Stack Overflow contributors},
  url = {https://sodocumentation.net/antlr/topic/3271/lexer-rules-in-v4},
  year = "(dostępny Maj 30, 2021)"
}
