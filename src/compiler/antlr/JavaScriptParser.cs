//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaScriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MULTI_LINE_COMMENT=1, SINGLE_LINE_COMMENT=2, CONSOLE_LOG=3, VAR=4, ASSIGN=5, 
		PLUS=6, MINUS=7, DIVIDE=8, MULTIPLY=9, OPEN_PAREN=10, CLOSE_PAREN=11, 
		LESS_THAN=12, MORE_THAN=13, LESS_THAN_EQUALS=14, GREATER_THAN_EQUALS=15, 
		EQUALS=16, NOT_EQUALS=17, IDENTITY_EQUALS=18, IDENTITY_NOT_EQUALS=19, 
		AND=20, OR=21, BOOLEAN=22, NUMBER=23, IDENTIFIER=24, STRING=25, EOL=26, 
		WHITE_SPACES=27;
	public const int
		RULE_parse = 0, RULE_instructions = 1, RULE_instructionLine = 2, RULE_instruction = 3, 
		RULE_writeStdOutput = 4, RULE_writeStdOutputConstant = 5, RULE_writeStdOutputIdentifier = 6, 
		RULE_writeStdOutputArithmeticOperation = 7, RULE_arithmeticOperation = 8, 
		RULE_arithmeticOperationHigher = 9, RULE_conditionOperation = 10, RULE_arithmeticAdditiveSign = 11, 
		RULE_arithmeticMultiplpicativeSign = 12, RULE_value = 13, RULE_constantValue = 14, 
		RULE_booleanValue = 15, RULE_stringValue = 16, RULE_numberValue = 17, 
		RULE_identifierValue = 18, RULE_variableDeclaratiion = 19, RULE_conditionSign = 20, 
		RULE_assignOperation = 21;
	public static readonly string[] ruleNames = {
		"parse", "instructions", "instructionLine", "instruction", "writeStdOutput", 
		"writeStdOutputConstant", "writeStdOutputIdentifier", "writeStdOutputArithmeticOperation", 
		"arithmeticOperation", "arithmeticOperationHigher", "conditionOperation", 
		"arithmeticAdditiveSign", "arithmeticMultiplpicativeSign", "value", "constantValue", 
		"booleanValue", "stringValue", "numberValue", "identifierValue", "variableDeclaratiion", 
		"conditionSign", "assignOperation"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'console.log'", "'var'", "'='", "'+'", "'-'", "'/'", 
		"'*'", "'('", "')'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'==='", 
		"'!=='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "CONSOLE_LOG", "VAR", 
		"ASSIGN", "PLUS", "MINUS", "DIVIDE", "MULTIPLY", "OPEN_PAREN", "CLOSE_PAREN", 
		"LESS_THAN", "MORE_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "EQUALS", 
		"NOT_EQUALS", "IDENTITY_EQUALS", "IDENTITY_NOT_EQUALS", "AND", "OR", "BOOLEAN", 
		"NUMBER", "IDENTIFIER", "STRING", "EOL", "WHITE_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CONSOLE_LOG || _la==VAR) {
				{
				{
				State = 44; instructions();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 50; Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		public InstructionLineContext[] instructionLine() {
			return GetRuleContexts<InstructionLineContext>();
		}
		public InstructionLineContext instructionLine(int i) {
			return GetRuleContext<InstructionLineContext>(i);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_instructions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 53; instructionLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLineContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(JavaScriptParser.EOL, 0); }
		public InstructionLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructionLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructionLine(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLineContext instructionLine() {
		InstructionLineContext _localctx = new InstructionLineContext(Context, State);
		EnterRule(_localctx, 4, RULE_instructionLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; instruction();
			State = 59; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public AssignOperationContext assignOperation() {
			return GetRuleContext<AssignOperationContext>(0);
		}
		public WriteStdOutputContext writeStdOutput() {
			return GetRuleContext<WriteStdOutputContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; variableDeclaratiion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; assignOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; writeStdOutput();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputContext : ParserRuleContext {
		public WriteStdOutputConstantContext writeStdOutputConstant() {
			return GetRuleContext<WriteStdOutputConstantContext>(0);
		}
		public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
			return GetRuleContext<WriteStdOutputIdentifierContext>(0);
		}
		public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
			return GetRuleContext<WriteStdOutputArithmeticOperationContext>(0);
		}
		public WriteStdOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutput(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputContext writeStdOutput() {
		WriteStdOutputContext _localctx = new WriteStdOutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_writeStdOutput);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; writeStdOutputConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; writeStdOutputIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; writeStdOutputArithmeticOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputConstantContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputConstant(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputConstantContext writeStdOutputConstant() {
		WriteStdOutputConstantContext _localctx = new WriteStdOutputConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_writeStdOutputConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(CONSOLE_LOG);
			State = 72; Match(OPEN_PAREN);
			State = 73; constantValue();
			State = 74; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputIdentifierContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
		WriteStdOutputIdentifierContext _localctx = new WriteStdOutputIdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_writeStdOutputIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(CONSOLE_LOG);
			State = 77; Match(OPEN_PAREN);
			State = 78; identifierValue();
			State = 79; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputArithmeticOperationContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputArithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
		WriteStdOutputArithmeticOperationContext _localctx = new WriteStdOutputArithmeticOperationContext(Context, State);
		EnterRule(_localctx, 14, RULE_writeStdOutputArithmeticOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(CONSOLE_LOG);
			State = 82; Match(OPEN_PAREN);
			State = 83; arithmeticOperation(0);
			State = 84; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperationContext : ParserRuleContext {
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
			return GetRuleContext<ArithmeticAdditiveSignContext>(0);
		}
		public ArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationContext arithmeticOperation() {
		return arithmeticOperation(0);
	}

	private ArithmeticOperationContext arithmeticOperation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationContext _localctx = new ArithmeticOperationContext(Context, _parentState);
		ArithmeticOperationContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_arithmeticOperation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 87; arithmeticOperationHigher(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 95;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperation);
					State = 89;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 90; arithmeticAdditiveSign();
					State = 91; arithmeticOperationHigher(0);
					}
					} 
				}
				State = 97;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithmeticOperationHigherContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
			return GetRuleContext<ArithmeticMultiplpicativeSignContext>(0);
		}
		public ArithmeticOperationHigherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperationHigher; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperationHigher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperationHigher(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationHigherContext arithmeticOperationHigher() {
		return arithmeticOperationHigher(0);
	}

	private ArithmeticOperationHigherContext arithmeticOperationHigher(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationHigherContext _localctx = new ArithmeticOperationHigherContext(Context, _parentState);
		ArithmeticOperationHigherContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_arithmeticOperationHigher, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 99; value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationHigherContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperationHigher);
					State = 101;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 102; arithmeticMultiplpicativeSign();
					State = 103; value();
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionOperationContext : ParserRuleContext {
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionSignContext conditionSign() {
			return GetRuleContext<ConditionSignContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public ConditionOperationContext conditionOperation() {
		ConditionOperationContext _localctx = new ConditionOperationContext(Context, State);
		EnterRule(_localctx, 20, RULE_conditionOperation);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; arithmeticOperation(0);
				State = 111; conditionSign();
				State = 112; conditionOperation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; arithmeticOperation(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAdditiveSignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(JavaScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JavaScriptParser.MINUS, 0); }
		public ArithmeticAdditiveSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAdditiveSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticAdditiveSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticAdditiveSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
		ArithmeticAdditiveSignContext _localctx = new ArithmeticAdditiveSignContext(Context, State);
		EnterRule(_localctx, 22, RULE_arithmeticAdditiveSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticMultiplpicativeSignContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(JavaScriptParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JavaScriptParser.DIVIDE, 0); }
		public ArithmeticMultiplpicativeSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticMultiplpicativeSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticMultiplpicativeSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticMultiplpicativeSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
		ArithmeticMultiplpicativeSignContext _localctx = new ArithmeticMultiplpicativeSignContext(Context, State);
		EnterRule(_localctx, 24, RULE_arithmeticMultiplpicativeSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_value);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; constantValue();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_constantValue);
		try {
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; booleanValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; stringValue();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; numberValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(JavaScriptParser.BOOLEAN, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_booleanValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JavaScriptParser.STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JavaScriptParser.NUMBER, 0); }
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_numberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_identifierValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratiionContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(JavaScriptParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public VariableDeclaratiionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratiion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratiion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratiion(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratiionContext variableDeclaratiion() {
		VariableDeclaratiionContext _localctx = new VariableDeclaratiionContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableDeclaratiion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(VAR);
			State = 139; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionSignContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(JavaScriptParser.LESS_THAN, 0); }
		public ITerminalNode MORE_THAN() { return GetToken(JavaScriptParser.MORE_THAN, 0); }
		public ITerminalNode LESS_THAN_EQUALS() { return GetToken(JavaScriptParser.LESS_THAN_EQUALS, 0); }
		public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(JavaScriptParser.GREATER_THAN_EQUALS, 0); }
		public ITerminalNode EQUALS() { return GetToken(JavaScriptParser.EQUALS, 0); }
		public ITerminalNode NOT_EQUALS() { return GetToken(JavaScriptParser.NOT_EQUALS, 0); }
		public ITerminalNode IDENTITY_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_EQUALS, 0); }
		public ITerminalNode IDENTITY_NOT_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_NOT_EQUALS, 0); }
		public ConditionSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionSign(this);
		}
	}

	[RuleVersion(0)]
	public ConditionSignContext conditionSign() {
		ConditionSignContext _localctx = new ConditionSignContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditionSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << MORE_THAN) | (1L << LESS_THAN_EQUALS) | (1L << GREATER_THAN_EQUALS) | (1L << EQUALS) | (1L << NOT_EQUALS) | (1L << IDENTITY_EQUALS) | (1L << IDENTITY_NOT_EQUALS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperationContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaScriptParser.ASSIGN, 0); }
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignOperation(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperationContext assignOperation() {
		AssignOperationContext _localctx = new AssignOperationContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignOperation);
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143; variableDeclaratiion();
				State = 144; Match(ASSIGN);
				State = 145; arithmeticOperation(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; variableDeclaratiion();
				State = 148; Match(ASSIGN);
				State = 149; conditionOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 151; variableDeclaratiion();
				State = 152; Match(ASSIGN);
				State = 153; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return arithmeticOperation_sempred((ArithmeticOperationContext)_localctx, predIndex);
		case 9: return arithmeticOperationHigher_sempred((ArithmeticOperationHigherContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmeticOperation_sempred(ArithmeticOperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool arithmeticOperationHigher_sempred(ArithmeticOperationHigherContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\xA0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\a', 
		'\x2', '\x30', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x33', '\v', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x36', '\n', '\x2', '\x3', '\x3', '\x6', 
		'\x3', '\x39', '\n', '\x3', '\r', '\x3', '\xE', '\x3', ':', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x43', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '`', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x63', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'l', '\n', '\v', '\f', '\v', '\xE', '\v', 'o', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'v', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '~', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x83', '\n', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x9E', '\n', '\x17', '\x3', '\x17', '\x2', '\x4', '\x12', '\x14', '\x18', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '\x2', '\x5', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', '\v', 
		'\x3', '\x2', '\xE', '\x15', '\x2', '\x98', '\x2', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x38', '\x3', '\x2', '\x2', '\x2', '\x6', '<', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x42', '\x3', '\x2', '\x2', '\x2', '\n', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x10', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x12', 'X', '\x3', '\x2', '\x2', '\x2', '\x14', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'u', '\x3', '\x2', '\x2', '\x2', '\x18', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'y', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x82', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x84', '\x3', '\x2', '\x2', '\x2', '\"', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x88', '\x3', '\x2', '\x2', '\x2', '&', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x8C', '\x3', '\x2', '\x2', '\x2', '*', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x9D', '\x3', '\x2', '\x2', '\x2', '.', 
		'\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x33', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x36', '\a', '\x2', '\x2', '\x3', '\x35', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x39', '\x5', '\x6', '\x4', '\x2', 
		'\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x5', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\x5', '\b', '\x5', '\x2', '=', '>', '\a', '\x1C', '\x2', '\x2', '>', 
		'\a', '\x3', '\x2', '\x2', '\x2', '?', '\x43', '\x5', '(', '\x15', '\x2', 
		'@', '\x43', '\x5', ',', '\x17', '\x2', '\x41', '\x43', '\x5', '\n', '\x6', 
		'\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\x44', 'H', '\x5', '\f', '\a', '\x2', '\x45', 
		'H', '\x5', '\xE', '\b', '\x2', '\x46', 'H', '\x5', '\x10', '\t', '\x2', 
		'G', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\a', '\x5', '\x2', '\x2', 'J', 'K', '\a', '\f', 
		'\x2', '\x2', 'K', 'L', '\x5', '\x1E', '\x10', '\x2', 'L', 'M', '\a', 
		'\r', '\x2', '\x2', 'M', '\r', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', 
		'\x5', '\x2', '\x2', 'O', 'P', '\a', '\f', '\x2', '\x2', 'P', 'Q', '\x5', 
		'&', '\x14', '\x2', 'Q', 'R', '\a', '\r', '\x2', '\x2', 'R', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'T', '\a', '\x5', '\x2', '\x2', 'T', 'U', '\a', 
		'\f', '\x2', '\x2', 'U', 'V', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', 
		'\r', '\x2', '\x2', 'W', '\x11', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', 
		'\b', '\n', '\x1', '\x2', 'Y', 'Z', '\x5', '\x14', '\v', '\x2', 'Z', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '[', '\\', '\f', '\x4', '\x2', '\x2', '\\', 
		']', '\x5', '\x18', '\r', '\x2', ']', '^', '\x5', '\x14', '\v', '\x2', 
		'^', '`', '\x3', '\x2', '\x2', '\x2', '_', '[', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\b', '\v', '\x1', '\x2', '\x65', '\x66', '\x5', '\x1C', '\xF', 
		'\x2', '\x66', 'm', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\f', '\x4', 
		'\x2', '\x2', 'h', 'i', '\x5', '\x1A', '\xE', '\x2', 'i', 'j', '\x5', 
		'\x1C', '\xF', '\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 
		'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x15', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\x5', '\x12', '\n', '\x2', 'q', 'r', '\x5', '*', '\x16', 
		'\x2', 'r', 's', '\x5', '\x16', '\f', '\x2', 's', 'v', '\x3', '\x2', '\x2', 
		'\x2', 't', 'v', '\x5', '\x12', '\n', '\x2', 'u', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', '\x17', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\t', '\x2', '\x2', '\x2', 'x', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'z', '\t', '\x3', '\x2', '\x2', 'z', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '{', '~', '\x5', '\x1E', '\x10', '\x2', '|', 
		'~', '\x5', '&', '\x14', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', 
		'}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x83', '\x5', ' ', '\x11', '\x2', '\x80', '\x83', '\x5', 
		'\"', '\x12', '\x2', '\x81', '\x83', '\x5', '$', '\x13', '\x2', '\x82', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\x18', '\x2', '\x2', '\x85', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x1B', '\x2', 
		'\x2', '\x87', '#', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\x19', '\x2', '\x2', '\x89', '%', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\a', '\x1A', '\x2', '\x2', '\x8B', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\x6', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'\x1A', '\x2', '\x2', '\x8E', ')', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\t', '\x4', '\x2', '\x2', '\x90', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x5', '(', '\x15', '\x2', '\x92', '\x93', '\a', '\a', 
		'\x2', '\x2', '\x93', '\x94', '\x5', '\x12', '\n', '\x2', '\x94', '\x9E', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x5', '(', '\x15', '\x2', 
		'\x96', '\x97', '\a', '\a', '\x2', '\x2', '\x97', '\x98', '\x5', '\x16', 
		'\f', '\x2', '\x98', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x5', '(', '\x15', '\x2', '\x9A', '\x9B', '\a', '\a', '\x2', '\x2', '\x9B', 
		'\x9C', '\x5', '\x1C', '\xF', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x91', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'-', '\x3', '\x2', '\x2', '\x2', '\r', '\x31', '\x35', ':', '\x42', 'G', 
		'\x61', 'm', 'u', '}', '\x82', '\x9D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
