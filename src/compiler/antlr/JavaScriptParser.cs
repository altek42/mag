//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaScriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MULTI_LINE_COMMENT=1, SINGLE_LINE_COMMENT=2, CONSOLE_LOG=3, VAR=4, CONTINUE=5, 
		FOR=6, WHILE=7, FUNCTION=8, OPEN_BRACKET=9, CLOSE_BRACKET=10, OPEN_BRACE=11, 
		CLOSE_BRACE=12, COMMA=13, SEMI_COLON=14, ASSIGN=15, PLUS=16, MINUS=17, 
		DIVIDE=18, MULTIPLY=19, OPEN_PAREN=20, CLOSE_PAREN=21, LESS_THAN=22, MORE_THAN=23, 
		LESS_THAN_EQUALS=24, GREATER_THAN_EQUALS=25, EQUALS=26, NOT_EQUALS=27, 
		IDENTITY_EQUALS=28, IDENTITY_NOT_EQUALS=29, AND=30, OR=31, BOOLEAN=32, 
		IF=33, ELSE=34, NUMBER=35, IDENTIFIER=36, STRING=37, EOL=38, WHITE_SPACES=39;
	public const int
		RULE_parse = 0, RULE_instructions = 1, RULE_instructionLine = 2, RULE_instruction = 3, 
		RULE_instructionBlock = 4, RULE_writeStdOutput = 5, RULE_writeStdOutputConstant = 6, 
		RULE_writeStdOutputIdentifier = 7, RULE_writeStdOutputArithmeticOperation = 8, 
		RULE_arithmeticOperation = 9, RULE_arithmeticOperationHigher = 10, RULE_conditionOperation = 11, 
		RULE_arithmeticAdditiveSign = 12, RULE_arithmeticMultiplpicativeSign = 13, 
		RULE_value = 14, RULE_constantValue = 15, RULE_booleanValue = 16, RULE_stringValue = 17, 
		RULE_numberValue = 18, RULE_identifierValue = 19, RULE_variableDeclaratiion = 20, 
		RULE_conditionSign = 21, RULE_assignOperation = 22, RULE_assignValue = 23, 
		RULE_singleExpression = 24, RULE_ifStatement = 25, RULE_ifStatementConditionOperation = 26, 
		RULE_elseStatement = 27, RULE_loops = 28, RULE_whileLoop = 29, RULE_whileStatementConditionOperation = 30, 
		RULE_forLoop = 31, RULE_forStatementConditionOperation = 32, RULE_forExpression = 33, 
		RULE_arrayLiteral = 34, RULE_elementList = 35, RULE_arrayElement = 36, 
		RULE_functionDeclaration = 37, RULE_formalParameterList = 38, RULE_formalParameterArg = 39, 
		RULE_functionCall = 40, RULE_arguments = 41, RULE_argument = 42;
	public static readonly string[] ruleNames = {
		"parse", "instructions", "instructionLine", "instruction", "instructionBlock", 
		"writeStdOutput", "writeStdOutputConstant", "writeStdOutputIdentifier", 
		"writeStdOutputArithmeticOperation", "arithmeticOperation", "arithmeticOperationHigher", 
		"conditionOperation", "arithmeticAdditiveSign", "arithmeticMultiplpicativeSign", 
		"value", "constantValue", "booleanValue", "stringValue", "numberValue", 
		"identifierValue", "variableDeclaratiion", "conditionSign", "assignOperation", 
		"assignValue", "singleExpression", "ifStatement", "ifStatementConditionOperation", 
		"elseStatement", "loops", "whileLoop", "whileStatementConditionOperation", 
		"forLoop", "forStatementConditionOperation", "forExpression", "arrayLiteral", 
		"elementList", "arrayElement", "functionDeclaration", "formalParameterList", 
		"formalParameterArg", "functionCall", "arguments", "argument"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'console.log'", "'var'", "'continue'", "'for'", "'while'", 
		"'function'", "'['", "']'", "'{'", "'}'", "','", "';'", "'='", "'+'", 
		"'-'", "'/'", "'*'", "'('", "')'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'==='", "'!=='", "'&&'", "'||'", null, "'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "CONSOLE_LOG", "VAR", 
		"CONTINUE", "FOR", "WHILE", "FUNCTION", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_BRACE", "CLOSE_BRACE", "COMMA", "SEMI_COLON", "ASSIGN", "PLUS", 
		"MINUS", "DIVIDE", "MULTIPLY", "OPEN_PAREN", "CLOSE_PAREN", "LESS_THAN", 
		"MORE_THAN", "LESS_THAN_EQUALS", "GREATER_THAN_EQUALS", "EQUALS", "NOT_EQUALS", 
		"IDENTITY_EQUALS", "IDENTITY_NOT_EQUALS", "AND", "OR", "BOOLEAN", "IF", 
		"ELSE", "NUMBER", "IDENTIFIER", "STRING", "EOL", "WHITE_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSOLE_LOG) | (1L << VAR) | (1L << FOR) | (1L << WHILE) | (1L << FUNCTION) | (1L << IF) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 86; instructions();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 92; Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		public InstructionLineContext[] instructionLine() {
			return GetRuleContexts<InstructionLineContext>();
		}
		public InstructionLineContext instructionLine(int i) {
			return GetRuleContext<InstructionLineContext>(i);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_instructions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 95; instructionLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLineContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(JavaScriptParser.EOL, 0); }
		public InstructionLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructionLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructionLine(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLineContext instructionLine() {
		InstructionLineContext _localctx = new InstructionLineContext(Context, State);
		EnterRule(_localctx, 4, RULE_instructionLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; instruction();
			State = 101; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public AssignOperationContext assignOperation() {
			return GetRuleContext<AssignOperationContext>(0);
		}
		public WriteStdOutputContext writeStdOutput() {
			return GetRuleContext<WriteStdOutputContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public LoopsContext loops() {
			return GetRuleContext<LoopsContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; variableDeclaratiion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; assignOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; writeStdOutput();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 106; ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 107; loops();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 108; functionDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 109; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionBlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(JavaScriptParser.OPEN_BRACE, 0); }
		public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(JavaScriptParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] EOL() { return GetTokens(JavaScriptParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(JavaScriptParser.EOL, i);
		}
		public InstructionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructionBlock(this);
		}
	}

	[RuleVersion(0)]
	public InstructionBlockContext instructionBlock() {
		InstructionBlockContext _localctx = new InstructionBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_instructionBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 112; Match(EOL);
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 118; Match(OPEN_BRACE);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 119; Match(EOL);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 125; instructions();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 126; Match(EOL);
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132; Match(CLOSE_BRACE);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 133; Match(EOL);
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputContext : ParserRuleContext {
		public WriteStdOutputConstantContext writeStdOutputConstant() {
			return GetRuleContext<WriteStdOutputConstantContext>(0);
		}
		public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
			return GetRuleContext<WriteStdOutputIdentifierContext>(0);
		}
		public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
			return GetRuleContext<WriteStdOutputArithmeticOperationContext>(0);
		}
		public WriteStdOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutput(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputContext writeStdOutput() {
		WriteStdOutputContext _localctx = new WriteStdOutputContext(Context, State);
		EnterRule(_localctx, 10, RULE_writeStdOutput);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; writeStdOutputConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 140; writeStdOutputIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; writeStdOutputArithmeticOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputConstantContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputConstant(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputConstantContext writeStdOutputConstant() {
		WriteStdOutputConstantContext _localctx = new WriteStdOutputConstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_writeStdOutputConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(CONSOLE_LOG);
			State = 145; Match(OPEN_PAREN);
			State = 146; constantValue();
			State = 147; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputIdentifierContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
		WriteStdOutputIdentifierContext _localctx = new WriteStdOutputIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_writeStdOutputIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(CONSOLE_LOG);
			State = 150; Match(OPEN_PAREN);
			State = 151; identifierValue();
			State = 152; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputArithmeticOperationContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputArithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
		WriteStdOutputArithmeticOperationContext _localctx = new WriteStdOutputArithmeticOperationContext(Context, State);
		EnterRule(_localctx, 16, RULE_writeStdOutputArithmeticOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(CONSOLE_LOG);
			State = 155; Match(OPEN_PAREN);
			State = 156; arithmeticOperation(0);
			State = 157; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperationContext : ParserRuleContext {
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
			return GetRuleContext<ArithmeticAdditiveSignContext>(0);
		}
		public ArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationContext arithmeticOperation() {
		return arithmeticOperation(0);
	}

	private ArithmeticOperationContext arithmeticOperation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationContext _localctx = new ArithmeticOperationContext(Context, _parentState);
		ArithmeticOperationContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_arithmeticOperation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 160; arithmeticOperationHigher(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperation);
					State = 162;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 163; arithmeticAdditiveSign();
					State = 164; arithmeticOperationHigher(0);
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithmeticOperationHigherContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
			return GetRuleContext<ArithmeticMultiplpicativeSignContext>(0);
		}
		public ArithmeticOperationHigherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperationHigher; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperationHigher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperationHigher(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationHigherContext arithmeticOperationHigher() {
		return arithmeticOperationHigher(0);
	}

	private ArithmeticOperationHigherContext arithmeticOperationHigher(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationHigherContext _localctx = new ArithmeticOperationHigherContext(Context, _parentState);
		ArithmeticOperationHigherContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_arithmeticOperationHigher, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 172; value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationHigherContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperationHigher);
					State = 174;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 175; arithmeticMultiplpicativeSign();
					State = 176; value();
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionOperationContext : ParserRuleContext {
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionSignContext conditionSign() {
			return GetRuleContext<ConditionSignContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public ConditionOperationContext conditionOperation() {
		ConditionOperationContext _localctx = new ConditionOperationContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionOperation);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 183; arithmeticOperation(0);
				State = 184; conditionSign();
				State = 185; conditionOperation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; arithmeticOperation(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAdditiveSignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(JavaScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JavaScriptParser.MINUS, 0); }
		public ArithmeticAdditiveSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAdditiveSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticAdditiveSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticAdditiveSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
		ArithmeticAdditiveSignContext _localctx = new ArithmeticAdditiveSignContext(Context, State);
		EnterRule(_localctx, 24, RULE_arithmeticAdditiveSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticMultiplpicativeSignContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(JavaScriptParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JavaScriptParser.DIVIDE, 0); }
		public ArithmeticMultiplpicativeSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticMultiplpicativeSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticMultiplpicativeSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticMultiplpicativeSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
		ArithmeticMultiplpicativeSignContext _localctx = new ArithmeticMultiplpicativeSignContext(Context, State);
		EnterRule(_localctx, 26, RULE_arithmeticMultiplpicativeSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_la = TokenStream.LA(1);
			if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; constantValue();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_constantValue);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198; booleanValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199; stringValue();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200; numberValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(JavaScriptParser.BOOLEAN, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_booleanValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JavaScriptParser.STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JavaScriptParser.NUMBER, 0); }
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_numberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(JavaScriptParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(JavaScriptParser.CLOSE_BRACKET, 0); }
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifierValue);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(IDENTIFIER);
				State = 211; Match(OPEN_BRACKET);
				State = 214;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NUMBER:
					{
					State = 212; numberValue();
					}
					break;
				case IDENTIFIER:
					{
					State = 213; identifierValue();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 216; Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratiionContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(JavaScriptParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public VariableDeclaratiionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratiion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratiion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratiion(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratiionContext variableDeclaratiion() {
		VariableDeclaratiionContext _localctx = new VariableDeclaratiionContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableDeclaratiion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(VAR);
			State = 221; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionSignContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(JavaScriptParser.LESS_THAN, 0); }
		public ITerminalNode MORE_THAN() { return GetToken(JavaScriptParser.MORE_THAN, 0); }
		public ITerminalNode LESS_THAN_EQUALS() { return GetToken(JavaScriptParser.LESS_THAN_EQUALS, 0); }
		public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(JavaScriptParser.GREATER_THAN_EQUALS, 0); }
		public ITerminalNode EQUALS() { return GetToken(JavaScriptParser.EQUALS, 0); }
		public ITerminalNode NOT_EQUALS() { return GetToken(JavaScriptParser.NOT_EQUALS, 0); }
		public ITerminalNode IDENTITY_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_EQUALS, 0); }
		public ITerminalNode IDENTITY_NOT_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_NOT_EQUALS, 0); }
		public ConditionSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionSign(this);
		}
	}

	[RuleVersion(0)]
	public ConditionSignContext conditionSign() {
		ConditionSignContext _localctx = new ConditionSignContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditionSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << MORE_THAN) | (1L << LESS_THAN_EQUALS) | (1L << GREATER_THAN_EQUALS) | (1L << EQUALS) | (1L << NOT_EQUALS) | (1L << IDENTITY_EQUALS) | (1L << IDENTITY_NOT_EQUALS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperationContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaScriptParser.ASSIGN, 0); }
		public AssignValueContext assignValue() {
			return GetRuleContext<AssignValueContext>(0);
		}
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public AssignOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignOperation(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperationContext assignOperation() {
		AssignOperationContext _localctx = new AssignOperationContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignOperation);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225; variableDeclaratiion();
				State = 226; Match(ASSIGN);
				State = 227; assignValue();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; identifierValue();
				State = 230; Match(ASSIGN);
				State = 231; assignValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignValueContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public AssignValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignValue(this);
		}
	}

	[RuleVersion(0)]
	public AssignValueContext assignValue() {
		AssignValueContext _localctx = new AssignValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignValue);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case NUMBER:
			case IDENTIFIER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; singleExpression();
				}
				break;
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSingleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSingleExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_singleExpression);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; arithmeticOperation(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; conditionOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 242; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(JavaScriptParser.IF, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public IfStatementConditionOperationContext ifStatementConditionOperation() {
			return GetRuleContext<IfStatementConditionOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; Match(IF);
			State = 246; Match(OPEN_PAREN);
			State = 247; ifStatementConditionOperation();
			State = 248; Match(CLOSE_PAREN);
			State = 249; instructionBlock();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 250; elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementConditionOperationContext : ParserRuleContext {
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public IfStatementConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementConditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatementConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatementConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementConditionOperationContext ifStatementConditionOperation() {
		IfStatementConditionOperationContext _localctx = new IfStatementConditionOperationContext(Context, State);
		EnterRule(_localctx, 52, RULE_ifStatementConditionOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; conditionOperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(JavaScriptParser.ELSE, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(ELSE);
			State = 256; instructionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopsContext : ParserRuleContext {
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public LoopsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loops; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLoops(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLoops(this);
		}
	}

	[RuleVersion(0)]
	public LoopsContext loops() {
		LoopsContext _localctx = new LoopsContext(Context, State);
		EnterRule(_localctx, 56, RULE_loops);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; whileLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(JavaScriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public WhileStatementConditionOperationContext whileStatementConditionOperation() {
			return GetRuleContext<WhileStatementConditionOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileLoop(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 58, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(WHILE);
			State = 263; Match(OPEN_PAREN);
			State = 264; whileStatementConditionOperation();
			State = 265; Match(CLOSE_PAREN);
			State = 266; instructionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementConditionOperationContext : ParserRuleContext {
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public WhileStatementConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatementConditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatementConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatementConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementConditionOperationContext whileStatementConditionOperation() {
		WhileStatementConditionOperationContext _localctx = new WhileStatementConditionOperationContext(Context, State);
		EnterRule(_localctx, 60, RULE_whileStatementConditionOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; conditionOperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(JavaScriptParser.FOR, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ITerminalNode[] SEMI_COLON() { return GetTokens(JavaScriptParser.SEMI_COLON); }
		public ITerminalNode SEMI_COLON(int i) {
			return GetToken(JavaScriptParser.SEMI_COLON, i);
		}
		public ForStatementConditionOperationContext forStatementConditionOperation() {
			return GetRuleContext<ForStatementConditionOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public AssignOperationContext assignOperation() {
			return GetRuleContext<AssignOperationContext>(0);
		}
		public ForExpressionContext forExpression() {
			return GetRuleContext<ForExpressionContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForLoop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForLoop(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 62, RULE_forLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(FOR);
			State = 271; Match(OPEN_PAREN);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR || _la==IDENTIFIER) {
				{
				State = 272; assignOperation();
				}
			}

			State = 275; Match(SEMI_COLON);
			State = 276; forStatementConditionOperation();
			State = 277; Match(SEMI_COLON);
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 278; forExpression();
				}
			}

			State = 281; Match(CLOSE_PAREN);
			State = 282; instructionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementConditionOperationContext : ParserRuleContext {
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ForStatementConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatementConditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatementConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatementConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementConditionOperationContext forStatementConditionOperation() {
		ForStatementConditionOperationContext _localctx = new ForStatementConditionOperationContext(Context, State);
		EnterRule(_localctx, 64, RULE_forStatementConditionOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; conditionOperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaScriptParser.ASSIGN, 0); }
		public AssignValueContext assignValue() {
			return GetRuleContext<AssignValueContext>(0);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForExpression(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_forExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; identifierValue();
			State = 287; Match(ASSIGN);
			State = 288; assignValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(JavaScriptParser.OPEN_BRACKET, 0); }
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(JavaScriptParser.CLOSE_BRACKET, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 68, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 290; Match(OPEN_BRACKET);
			State = 291; elementList();
			State = 292; Match(CLOSE_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(JavaScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaScriptParser.COMMA, i);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 70, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 294; Match(COMMA);
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				State = 300; arrayElement();
				}
			}

			State = 311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 303; Match(COMMA);
						}
						}
						State = 306;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA );
					State = 308; arrayElement();
					}
					} 
				}
				State = 313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 314; Match(COMMA);
				}
				}
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 72, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320; singleExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(JavaScriptParser.FUNCTION, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(FUNCTION);
			State = 323; Match(IDENTIFIER);
			State = 324; Match(OPEN_PAREN);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 325; formalParameterList();
				}
			}

			State = 328; Match(CLOSE_PAREN);
			State = 329; instructionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaScriptParser.COMMA, i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 76, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; formalParameterArg();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 332; Match(COMMA);
				State = 333; formalParameterArg();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 78, RULE_formalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 80, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341; Match(IDENTIFIER);
			State = 342; arguments();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JavaScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JavaScriptParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 82, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(OPEN_PAREN);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << STRING))) != 0)) {
				{
				State = 345; argument();
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 346; Match(COMMA);
						State = 347; argument();
						}
						} 
					}
					State = 352;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 353; Match(COMMA);
					}
				}

				}
			}

			State = 358; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 84, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; singleExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return arithmeticOperation_sempred((ArithmeticOperationContext)_localctx, predIndex);
		case 10: return arithmeticOperationHigher_sempred((ArithmeticOperationHigherContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmeticOperation_sempred(ArithmeticOperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool arithmeticOperationHigher_sempred(ArithmeticOperationHigherContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x16D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x3', '\x2', '\a', '\x2', 'Z', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', ']', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', '`', '\n', '\x2', 
		'\x3', '\x3', '\x6', '\x3', '\x63', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x64', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'q', '\n', '\x5', '\x3', '\x6', '\a', '\x6', 't', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'w', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\a', '\x6', '{', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 
		'~', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x82', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '\x85', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x89', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x8C', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x91', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\xA9', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\xAC', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xB5', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xB8', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xBF', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\xC7', '\n', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xCC', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xD9', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xDD', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xEC', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\xF0', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\xF6', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\xFE', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x107', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x114', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x11A', '\n', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\a', '%', '\x12A', '\n', '%', '\f', '%', '\xE', '%', '\x12D', 
		'\v', '%', '\x3', '%', '\x5', '%', '\x130', '\n', '%', '\x3', '%', '\x6', 
		'%', '\x133', '\n', '%', '\r', '%', '\xE', '%', '\x134', '\x3', '%', '\a', 
		'%', '\x138', '\n', '%', '\f', '%', '\xE', '%', '\x13B', '\v', '%', '\x3', 
		'%', '\a', '%', '\x13E', '\n', '%', '\f', '%', '\xE', '%', '\x141', '\v', 
		'%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x149', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x151', '\n', '(', 
		'\f', '(', '\xE', '(', '\x154', '\v', '(', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\a', '+', '\x15F', '\n', '+', '\f', '+', '\xE', '+', '\x162', '\v', 
		'+', '\x3', '+', '\x5', '+', '\x165', '\n', '+', '\x5', '+', '\x167', 
		'\n', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x2', '\x4', '\x14', '\x16', '-', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', '\x2', '\x5', '\x3', '\x2', '\x12', '\x13', '\x3', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x18', '\x1F', '\x2', '\x16B', '\x2', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x4', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x66', '\x3', '\x2', '\x2', '\x2', '\b', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'u', '\x3', '\x2', '\x2', '\x2', '\f', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x92', '\x3', '\x2', '\x2', '\x2', '\x10', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x16', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC6', '\x3', '\x2', '\x2', '\x2', ' ', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xCD', '\x3', '\x2', '\x2', '\x2', '$', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xD1', '\x3', '\x2', '\x2', '\x2', '(', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '.', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x32', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x38', '\x101', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x106', '\x3', '\x2', '\x2', '\x2', '<', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x10E', '\x3', '\x2', '\x2', '\x2', '@', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x11E', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x120', '\x3', '\x2', '\x2', '\x2', '\x46', '\x124', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x12B', '\x3', '\x2', '\x2', '\x2', 'J', '\x142', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x14D', '\x3', '\x2', '\x2', '\x2', 'P', '\x155', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x157', '\x3', '\x2', '\x2', '\x2', 'T', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x16A', '\x3', '\x2', '\x2', '\x2', 
		'X', 'Z', '\x5', '\x4', '\x3', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 
		'Z', ']', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', 
		'\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x2', '\x2', 
		'\x3', '_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x3', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\x5', 
		'\x6', '\x4', '\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x5', '\b', '\x5', '\x2', 'g', 'h', 
		'\a', '(', '\x2', '\x2', 'h', '\a', '\x3', '\x2', '\x2', '\x2', 'i', 'q', 
		'\x5', '*', '\x16', '\x2', 'j', 'q', '\x5', '.', '\x18', '\x2', 'k', 'q', 
		'\x5', '\f', '\a', '\x2', 'l', 'q', '\x5', '\x34', '\x1B', '\x2', 'm', 
		'q', '\x5', ':', '\x1E', '\x2', 'n', 'q', '\x5', 'L', '\'', '\x2', 'o', 
		'q', '\x5', 'R', '*', '\x2', 'p', 'i', '\x3', '\x2', '\x2', '\x2', 'p', 
		'j', '\x3', '\x2', '\x2', '\x2', 'p', 'k', '\x3', '\x2', '\x2', '\x2', 
		'p', 'l', '\x3', '\x2', '\x2', '\x2', 'p', 'm', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\a', '(', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', '|', '\a', '\r', '\x2', '\x2', 'y', '{', '\a', '(', '\x2', '\x2', 
		'z', 'y', '\x3', '\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', 
		'|', 'z', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x83', '\x5', '\x4', '\x3', '\x2', '\x80', '\x82', '\a', 
		'(', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x8A', '\a', '\xE', '\x2', '\x2', '\x87', '\x89', '\a', '(', '\x2', '\x2', 
		'\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x91', '\x5', '\xE', 
		'\b', '\x2', '\x8E', '\x91', '\x5', '\x10', '\t', '\x2', '\x8F', '\x91', 
		'\x5', '\x12', '\n', '\x2', '\x90', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\r', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\a', '\x5', '\x2', '\x2', '\x93', '\x94', '\a', '\x16', '\x2', '\x2', 
		'\x94', '\x95', '\x5', ' ', '\x11', '\x2', '\x95', '\x96', '\a', '\x17', 
		'\x2', '\x2', '\x96', '\xF', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\a', '\x5', '\x2', '\x2', '\x98', '\x99', '\a', '\x16', '\x2', '\x2', 
		'\x99', '\x9A', '\x5', '(', '\x15', '\x2', '\x9A', '\x9B', '\a', '\x17', 
		'\x2', '\x2', '\x9B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\a', '\x5', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x16', '\x2', '\x2', 
		'\x9E', '\x9F', '\x5', '\x14', '\v', '\x2', '\x9F', '\xA0', '\a', '\x17', 
		'\x2', '\x2', '\xA0', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\b', '\v', '\x1', '\x2', '\xA2', '\xA3', '\x5', '\x16', '\f', '\x2', 
		'\xA3', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\f', '\x4', 
		'\x2', '\x2', '\xA5', '\xA6', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xA7', 
		'\x5', '\x16', '\f', '\x2', '\xA7', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\b', '\f', 
		'\x1', '\x2', '\xAE', '\xAF', '\x5', '\x1E', '\x10', '\x2', '\xAF', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\f', '\x4', '\x2', '\x2', 
		'\xB1', '\xB2', '\x5', '\x1C', '\xF', '\x2', '\xB2', '\xB3', '\x5', '\x1E', 
		'\x10', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\x17', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\x14', '\v', '\x2', 
		'\xBA', '\xBB', '\x5', ',', '\x17', '\x2', '\xBB', '\xBC', '\x5', '\x18', 
		'\r', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', 
		'\x5', '\x14', '\v', '\x2', '\xBE', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\xC1', '\t', '\x2', '\x2', '\x2', '\xC1', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\t', '\x3', '\x2', '\x2', 
		'\xC3', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC7', '\x5', ' ', 
		'\x11', '\x2', '\xC5', '\xC7', '\x5', '(', '\x15', '\x2', '\xC6', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCC', '\x5', '\"', 
		'\x12', '\x2', '\xC9', '\xCC', '\x5', '$', '\x13', '\x2', '\xCA', '\xCC', 
		'\x5', '&', '\x14', '\x2', '\xCB', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '!', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\"', '\x2', '\x2', '\xCE', '#', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\a', '\'', '\x2', '\x2', '\xD0', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\a', '%', '\x2', '\x2', '\xD2', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xDD', '\a', '&', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'&', '\x2', '\x2', '\xD5', '\xD8', '\a', '\v', '\x2', '\x2', '\xD6', '\xD9', 
		'\x5', '&', '\x14', '\x2', '\xD7', '\xD9', '\x5', '(', '\x15', '\x2', 
		'\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\a', '\f', '\x2', '\x2', '\xDB', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', ')', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\a', '\x6', '\x2', '\x2', '\xDF', '\xE0', '\a', '&', '\x2', '\x2', '\xE0', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\t', '\x4', '\x2', '\x2', 
		'\xE2', '-', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x5', '*', '\x16', 
		'\x2', '\xE4', '\xE5', '\a', '\x11', '\x2', '\x2', '\xE5', '\xE6', '\x5', 
		'\x30', '\x19', '\x2', '\xE6', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x5', '(', '\x15', '\x2', '\xE8', '\xE9', '\a', '\x11', '\x2', 
		'\x2', '\xE9', '\xEA', '\x5', '\x30', '\x19', '\x2', '\xEA', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xEC', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF0', '\x5', '\x32', '\x1A', '\x2', '\xEE', '\xF0', '\x5', 
		'\x46', '$', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xF6', '\x5', '\x14', '\v', '\x2', '\xF2', '\xF6', '\x5', 
		'\x18', '\r', '\x2', '\xF3', '\xF6', '\x5', '\x1E', '\x10', '\x2', '\xF4', 
		'\xF6', '\x5', 'R', '*', '\x2', '\xF5', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '#', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '\x16', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\x36', '\x1C', 
		'\x2', '\xFA', '\xFB', '\a', '\x17', '\x2', '\x2', '\xFB', '\xFD', '\x5', 
		'\n', '\x6', '\x2', '\xFC', '\xFE', '\x5', '\x38', '\x1D', '\x2', '\xFD', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\x35', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x5', 
		'\x18', '\r', '\x2', '\x100', '\x37', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '$', '\x2', '\x2', '\x102', '\x103', '\x5', '\n', '\x6', 
		'\x2', '\x103', '\x39', '\x3', '\x2', '\x2', '\x2', '\x104', '\x107', 
		'\x5', '<', '\x1F', '\x2', '\x105', '\x107', '\x5', '@', '!', '\x2', '\x106', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x107', ';', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\a', 
		'\t', '\x2', '\x2', '\x109', '\x10A', '\a', '\x16', '\x2', '\x2', '\x10A', 
		'\x10B', '\x5', '>', ' ', '\x2', '\x10B', '\x10C', '\a', '\x17', '\x2', 
		'\x2', '\x10C', '\x10D', '\x5', '\n', '\x6', '\x2', '\x10D', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x18', '\r', '\x2', '\x10F', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\b', '\x2', 
		'\x2', '\x111', '\x113', '\a', '\x16', '\x2', '\x2', '\x112', '\x114', 
		'\x5', '.', '\x18', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\x10', '\x2', '\x2', '\x116', 
		'\x117', '\x5', '\x42', '\"', '\x2', '\x117', '\x119', '\a', '\x10', '\x2', 
		'\x2', '\x118', '\x11A', '\x5', '\x44', '#', '\x2', '\x119', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', 
		'\x17', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\n', '\x6', '\x2', '\x11D', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x5', '\x18', '\r', 
		'\x2', '\x11F', '\x43', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\x5', '(', '\x15', '\x2', '\x121', '\x122', '\a', '\x11', '\x2', '\x2', 
		'\x122', '\x123', '\x5', '\x30', '\x19', '\x2', '\x123', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\a', '\v', '\x2', '\x2', '\x125', 
		'\x126', '\x5', 'H', '%', '\x2', '\x126', '\x127', '\a', '\f', '\x2', 
		'\x2', '\x127', 'G', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12A', '\a', 
		'\xF', '\x2', '\x2', '\x129', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x130', '\x5', 'J', '&', '\x2', '\x12F', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\a', '\xF', '\x2', '\x2', 
		'\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x136', '\x138', '\x5', 'J', '&', '\x2', '\x137', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', '\xF', '\x2', '\x2', 
		'\x13D', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', 
		'\x5', '\x32', '\x1A', '\x2', '\x143', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\a', '\n', '\x2', '\x2', '\x145', '\x146', '\a', '&', 
		'\x2', '\x2', '\x146', '\x148', '\a', '\x16', '\x2', '\x2', '\x147', '\x149', 
		'\x5', 'N', '(', '\x2', '\x148', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\x17', '\x2', '\x2', '\x14B', 
		'\x14C', '\x5', '\n', '\x6', '\x2', '\x14C', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x152', '\x5', 'P', ')', '\x2', '\x14E', '\x14F', '\a', 
		'\xF', '\x2', '\x2', '\x14F', '\x151', '\x5', 'P', ')', '\x2', '\x150', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x152', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\a', 
		'&', '\x2', '\x2', '\x156', 'Q', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x158', '\a', '&', '\x2', '\x2', '\x158', '\x159', '\x5', 'T', '+', '\x2', 
		'\x159', 'S', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x166', '\a', '\x16', 
		'\x2', '\x2', '\x15B', '\x160', '\x5', 'V', ',', '\x2', '\x15C', '\x15D', 
		'\a', '\xF', '\x2', '\x2', '\x15D', '\x15F', '\x5', 'V', ',', '\x2', '\x15E', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x163', '\x165', '\a', 
		'\xF', '\x2', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x168', '\x169', '\a', '\x17', '\x2', '\x2', '\x169', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x16A', '\x16B', '\x5', '\x32', '\x1A', '\x2', '\x16B', 
		'W', '\x3', '\x2', '\x2', '\x2', '#', '[', '_', '\x64', 'p', 'u', '|', 
		'\x83', '\x8A', '\x90', '\xAA', '\xB6', '\xBE', '\xC6', '\xCB', '\xD8', 
		'\xDC', '\xEB', '\xEF', '\xF5', '\xFD', '\x106', '\x113', '\x119', '\x12B', 
		'\x12F', '\x134', '\x139', '\x13F', '\x148', '\x152', '\x160', '\x164', 
		'\x166',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
