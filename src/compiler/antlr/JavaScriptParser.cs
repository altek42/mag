//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaScriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		MULTI_LINE_COMMENT=1, SINGLE_LINE_COMMENT=2, CONSOLE_LOG=3, VAR=4, OPEN_BRACE=5, 
		CLOSE_BRACE=6, ASSIGN=7, PLUS=8, MINUS=9, DIVIDE=10, MULTIPLY=11, OPEN_PAREN=12, 
		CLOSE_PAREN=13, LESS_THAN=14, MORE_THAN=15, LESS_THAN_EQUALS=16, GREATER_THAN_EQUALS=17, 
		EQUALS=18, NOT_EQUALS=19, IDENTITY_EQUALS=20, IDENTITY_NOT_EQUALS=21, 
		AND=22, OR=23, BOOLEAN=24, IF=25, ELSE=26, NUMBER=27, IDENTIFIER=28, STRING=29, 
		EOL=30, WHITE_SPACES=31;
	public const int
		RULE_parse = 0, RULE_instructions = 1, RULE_instructionLine = 2, RULE_instruction = 3, 
		RULE_instructionBlock = 4, RULE_writeStdOutput = 5, RULE_writeStdOutputConstant = 6, 
		RULE_writeStdOutputIdentifier = 7, RULE_writeStdOutputArithmeticOperation = 8, 
		RULE_arithmeticOperation = 9, RULE_arithmeticOperationHigher = 10, RULE_conditionOperation = 11, 
		RULE_arithmeticAdditiveSign = 12, RULE_arithmeticMultiplpicativeSign = 13, 
		RULE_value = 14, RULE_constantValue = 15, RULE_booleanValue = 16, RULE_stringValue = 17, 
		RULE_numberValue = 18, RULE_identifierValue = 19, RULE_variableDeclaratiion = 20, 
		RULE_conditionSign = 21, RULE_assignOperation = 22, RULE_ifStatement = 23, 
		RULE_ifStatementConditionOperation = 24, RULE_elseStatement = 25;
	public static readonly string[] ruleNames = {
		"parse", "instructions", "instructionLine", "instruction", "instructionBlock", 
		"writeStdOutput", "writeStdOutputConstant", "writeStdOutputIdentifier", 
		"writeStdOutputArithmeticOperation", "arithmeticOperation", "arithmeticOperationHigher", 
		"conditionOperation", "arithmeticAdditiveSign", "arithmeticMultiplpicativeSign", 
		"value", "constantValue", "booleanValue", "stringValue", "numberValue", 
		"identifierValue", "variableDeclaratiion", "conditionSign", "assignOperation", 
		"ifStatement", "ifStatementConditionOperation", "elseStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'console.log'", "'var'", "'{'", "'}'", "'='", "'+'", 
		"'-'", "'/'", "'*'", "'('", "')'", "'<'", "'>'", "'<='", "'>='", "'=='", 
		"'!='", "'==='", "'!=='", "'&&'", "'||'", null, "'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "CONSOLE_LOG", "VAR", 
		"OPEN_BRACE", "CLOSE_BRACE", "ASSIGN", "PLUS", "MINUS", "DIVIDE", "MULTIPLY", 
		"OPEN_PAREN", "CLOSE_PAREN", "LESS_THAN", "MORE_THAN", "LESS_THAN_EQUALS", 
		"GREATER_THAN_EQUALS", "EQUALS", "NOT_EQUALS", "IDENTITY_EQUALS", "IDENTITY_NOT_EQUALS", 
		"AND", "OR", "BOOLEAN", "IF", "ELSE", "NUMBER", "IDENTIFIER", "STRING", 
		"EOL", "WHITE_SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public InstructionsContext[] instructions() {
			return GetRuleContexts<InstructionsContext>();
		}
		public InstructionsContext instructions(int i) {
			return GetRuleContext<InstructionsContext>(i);
		}
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSOLE_LOG) | (1L << VAR) | (1L << IF))) != 0)) {
				{
				{
				State = 52; instructions();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 58; Match(Eof);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionsContext : ParserRuleContext {
		public InstructionLineContext[] instructionLine() {
			return GetRuleContexts<InstructionLineContext>();
		}
		public InstructionLineContext instructionLine(int i) {
			return GetRuleContext<InstructionLineContext>(i);
		}
		public InstructionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructions(this);
		}
	}

	[RuleVersion(0)]
	public InstructionsContext instructions() {
		InstructionsContext _localctx = new InstructionsContext(Context, State);
		EnterRule(_localctx, 2, RULE_instructions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 61; instructionLine();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 64;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionLineContext : ParserRuleContext {
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(JavaScriptParser.EOL, 0); }
		public InstructionLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionLine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructionLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructionLine(this);
		}
	}

	[RuleVersion(0)]
	public InstructionLineContext instructionLine() {
		InstructionLineContext _localctx = new InstructionLineContext(Context, State);
		EnterRule(_localctx, 4, RULE_instructionLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; instruction();
			State = 67; Match(EOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public AssignOperationContext assignOperation() {
			return GetRuleContext<AssignOperationContext>(0);
		}
		public WriteStdOutputContext writeStdOutput() {
			return GetRuleContext<WriteStdOutputContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; variableDeclaratiion();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; assignOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; writeStdOutput();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionBlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(JavaScriptParser.OPEN_BRACE, 0); }
		public InstructionsContext instructions() {
			return GetRuleContext<InstructionsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(JavaScriptParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] EOL() { return GetTokens(JavaScriptParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(JavaScriptParser.EOL, i);
		}
		public InstructionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instructionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstructionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstructionBlock(this);
		}
	}

	[RuleVersion(0)]
	public InstructionBlockContext instructionBlock() {
		InstructionBlockContext _localctx = new InstructionBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_instructionBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 75; Match(EOL);
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 81; Match(OPEN_BRACE);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 82; Match(EOL);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88; instructions();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 89; Match(EOL);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95; Match(CLOSE_BRACE);
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 96; Match(EOL);
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputContext : ParserRuleContext {
		public WriteStdOutputConstantContext writeStdOutputConstant() {
			return GetRuleContext<WriteStdOutputConstantContext>(0);
		}
		public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
			return GetRuleContext<WriteStdOutputIdentifierContext>(0);
		}
		public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
			return GetRuleContext<WriteStdOutputArithmeticOperationContext>(0);
		}
		public WriteStdOutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutput; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutput(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutput(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputContext writeStdOutput() {
		WriteStdOutputContext _localctx = new WriteStdOutputContext(Context, State);
		EnterRule(_localctx, 10, RULE_writeStdOutput);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; writeStdOutputConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; writeStdOutputIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; writeStdOutputArithmeticOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputConstantContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputConstant(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputConstantContext writeStdOutputConstant() {
		WriteStdOutputConstantContext _localctx = new WriteStdOutputConstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_writeStdOutputConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(CONSOLE_LOG);
			State = 108; Match(OPEN_PAREN);
			State = 109; constantValue();
			State = 110; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputIdentifierContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputIdentifierContext writeStdOutputIdentifier() {
		WriteStdOutputIdentifierContext _localctx = new WriteStdOutputIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_writeStdOutputIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(CONSOLE_LOG);
			State = 113; Match(OPEN_PAREN);
			State = 114; identifierValue();
			State = 115; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStdOutputArithmeticOperationContext : ParserRuleContext {
		public ITerminalNode CONSOLE_LOG() { return GetToken(JavaScriptParser.CONSOLE_LOG, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public WriteStdOutputArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStdOutputArithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWriteStdOutputArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWriteStdOutputArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public WriteStdOutputArithmeticOperationContext writeStdOutputArithmeticOperation() {
		WriteStdOutputArithmeticOperationContext _localctx = new WriteStdOutputArithmeticOperationContext(Context, State);
		EnterRule(_localctx, 16, RULE_writeStdOutputArithmeticOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(CONSOLE_LOG);
			State = 118; Match(OPEN_PAREN);
			State = 119; arithmeticOperation(0);
			State = 120; Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperationContext : ParserRuleContext {
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
			return GetRuleContext<ArithmeticAdditiveSignContext>(0);
		}
		public ArithmeticOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperation(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationContext arithmeticOperation() {
		return arithmeticOperation(0);
	}

	private ArithmeticOperationContext arithmeticOperation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationContext _localctx = new ArithmeticOperationContext(Context, _parentState);
		ArithmeticOperationContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_arithmeticOperation, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 123; arithmeticOperationHigher(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperation);
					State = 125;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 126; arithmeticAdditiveSign();
					State = 127; arithmeticOperationHigher(0);
					}
					} 
				}
				State = 133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArithmeticOperationHigherContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArithmeticOperationHigherContext arithmeticOperationHigher() {
			return GetRuleContext<ArithmeticOperationHigherContext>(0);
		}
		public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
			return GetRuleContext<ArithmeticMultiplpicativeSignContext>(0);
		}
		public ArithmeticOperationHigherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperationHigher; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticOperationHigher(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticOperationHigher(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperationHigherContext arithmeticOperationHigher() {
		return arithmeticOperationHigher(0);
	}

	private ArithmeticOperationHigherContext arithmeticOperationHigher(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArithmeticOperationHigherContext _localctx = new ArithmeticOperationHigherContext(Context, _parentState);
		ArithmeticOperationHigherContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_arithmeticOperationHigher, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 135; value();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArithmeticOperationHigherContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_arithmeticOperationHigher);
					State = 137;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 138; arithmeticMultiplpicativeSign();
					State = 139; value();
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionOperationContext : ParserRuleContext {
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionSignContext conditionSign() {
			return GetRuleContext<ConditionSignContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public ConditionOperationContext conditionOperation() {
		ConditionOperationContext _localctx = new ConditionOperationContext(Context, State);
		EnterRule(_localctx, 22, RULE_conditionOperation);
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146; arithmeticOperation(0);
				State = 147; conditionSign();
				State = 148; conditionOperation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; arithmeticOperation(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAdditiveSignContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(JavaScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JavaScriptParser.MINUS, 0); }
		public ArithmeticAdditiveSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAdditiveSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticAdditiveSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticAdditiveSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAdditiveSignContext arithmeticAdditiveSign() {
		ArithmeticAdditiveSignContext _localctx = new ArithmeticAdditiveSignContext(Context, State);
		EnterRule(_localctx, 24, RULE_arithmeticAdditiveSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticMultiplpicativeSignContext : ParserRuleContext {
		public ITerminalNode MULTIPLY() { return GetToken(JavaScriptParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(JavaScriptParser.DIVIDE, 0); }
		public ArithmeticMultiplpicativeSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticMultiplpicativeSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArithmeticMultiplpicativeSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArithmeticMultiplpicativeSign(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticMultiplpicativeSignContext arithmeticMultiplpicativeSign() {
		ArithmeticMultiplpicativeSignContext _localctx = new ArithmeticMultiplpicativeSignContext(Context, State);
		EnterRule(_localctx, 26, RULE_arithmeticMultiplpicativeSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !(_la==DIVIDE || _la==MULTIPLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ConstantValueContext constantValue() {
			return GetRuleContext<ConstantValueContext>(0);
		}
		public IdentifierValueContext identifierValue() {
			return GetRuleContext<IdentifierValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_value);
		try {
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; constantValue();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; identifierValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantValueContext : ParserRuleContext {
		public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		public StringValueContext stringValue() {
			return GetRuleContext<StringValueContext>(0);
		}
		public NumberValueContext numberValue() {
			return GetRuleContext<NumberValueContext>(0);
		}
		public ConstantValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConstantValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConstantValue(this);
		}
	}

	[RuleVersion(0)]
	public ConstantValueContext constantValue() {
		ConstantValueContext _localctx = new ConstantValueContext(Context, State);
		EnterRule(_localctx, 30, RULE_constantValue);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; booleanValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; stringValue();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; numberValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(JavaScriptParser.BOOLEAN, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_booleanValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JavaScriptParser.STRING, 0); }
		public StringValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStringValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStringValue(this);
		}
	}

	[RuleVersion(0)]
	public StringValueContext stringValue() {
		StringValueContext _localctx = new StringValueContext(Context, State);
		EnterRule(_localctx, 34, RULE_stringValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberValueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JavaScriptParser.NUMBER, 0); }
		public NumberValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumberValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumberValue(this);
		}
	}

	[RuleVersion(0)]
	public NumberValueContext numberValue() {
		NumberValueContext _localctx = new NumberValueContext(Context, State);
		EnterRule(_localctx, 36, RULE_numberValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierValueContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public IdentifierValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierValue(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierValueContext identifierValue() {
		IdentifierValueContext _localctx = new IdentifierValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_identifierValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratiionContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(JavaScriptParser.VAR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaScriptParser.IDENTIFIER, 0); }
		public VariableDeclaratiionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratiion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratiion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratiion(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratiionContext variableDeclaratiion() {
		VariableDeclaratiionContext _localctx = new VariableDeclaratiionContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableDeclaratiion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(VAR);
			State = 175; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionSignContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(JavaScriptParser.LESS_THAN, 0); }
		public ITerminalNode MORE_THAN() { return GetToken(JavaScriptParser.MORE_THAN, 0); }
		public ITerminalNode LESS_THAN_EQUALS() { return GetToken(JavaScriptParser.LESS_THAN_EQUALS, 0); }
		public ITerminalNode GREATER_THAN_EQUALS() { return GetToken(JavaScriptParser.GREATER_THAN_EQUALS, 0); }
		public ITerminalNode EQUALS() { return GetToken(JavaScriptParser.EQUALS, 0); }
		public ITerminalNode NOT_EQUALS() { return GetToken(JavaScriptParser.NOT_EQUALS, 0); }
		public ITerminalNode IDENTITY_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_EQUALS, 0); }
		public ITerminalNode IDENTITY_NOT_EQUALS() { return GetToken(JavaScriptParser.IDENTITY_NOT_EQUALS, 0); }
		public ConditionSignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionSign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterConditionSign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitConditionSign(this);
		}
	}

	[RuleVersion(0)]
	public ConditionSignContext conditionSign() {
		ConditionSignContext _localctx = new ConditionSignContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditionSign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LESS_THAN) | (1L << MORE_THAN) | (1L << LESS_THAN_EQUALS) | (1L << GREATER_THAN_EQUALS) | (1L << EQUALS) | (1L << NOT_EQUALS) | (1L << IDENTITY_EQUALS) | (1L << IDENTITY_NOT_EQUALS))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignOperationContext : ParserRuleContext {
		public VariableDeclaratiionContext variableDeclaratiion() {
			return GetRuleContext<VariableDeclaratiionContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JavaScriptParser.ASSIGN, 0); }
		public ArithmeticOperationContext arithmeticOperation() {
			return GetRuleContext<ArithmeticOperationContext>(0);
		}
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssignOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignOperation(this);
		}
	}

	[RuleVersion(0)]
	public AssignOperationContext assignOperation() {
		AssignOperationContext _localctx = new AssignOperationContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignOperation);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; variableDeclaratiion();
				State = 180; Match(ASSIGN);
				State = 181; arithmeticOperation(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; variableDeclaratiion();
				State = 184; Match(ASSIGN);
				State = 185; conditionOperation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187; variableDeclaratiion();
				State = 188; Match(ASSIGN);
				State = 189; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(JavaScriptParser.IF, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(JavaScriptParser.OPEN_PAREN, 0); }
		public IfStatementConditionOperationContext ifStatementConditionOperation() {
			return GetRuleContext<IfStatementConditionOperationContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(JavaScriptParser.CLOSE_PAREN, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(IF);
			State = 194; Match(OPEN_PAREN);
			State = 195; ifStatementConditionOperation();
			State = 196; Match(CLOSE_PAREN);
			State = 197; instructionBlock();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 198; elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementConditionOperationContext : ParserRuleContext {
		public ConditionOperationContext conditionOperation() {
			return GetRuleContext<ConditionOperationContext>(0);
		}
		public IfStatementConditionOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatementConditionOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatementConditionOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatementConditionOperation(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementConditionOperationContext ifStatementConditionOperation() {
		IfStatementConditionOperationContext _localctx = new IfStatementConditionOperationContext(Context, State);
		EnterRule(_localctx, 48, RULE_ifStatementConditionOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; conditionOperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(JavaScriptParser.ELSE, 0); }
		public InstructionBlockContext instructionBlock() {
			return GetRuleContext<InstructionBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(ELSE);
			State = 204; instructionBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return arithmeticOperation_sempred((ArithmeticOperationContext)_localctx, predIndex);
		case 10: return arithmeticOperationHigher_sempred((ArithmeticOperationHigherContext)_localctx, predIndex);
		}
		return true;
	}
	private bool arithmeticOperation_sempred(ArithmeticOperationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool arithmeticOperationHigher_sempred(ArithmeticOperationHigherContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '!', '\xD1', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\a', '\x2', '\x38', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', ';', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'>', '\n', '\x2', '\x3', '\x3', '\x6', '\x3', '\x41', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\x42', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'L', '\n', '\x5', '\x3', '\x6', '\a', '\x6', 'O', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', 'R', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'V', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Y', '\v', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', ']', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '`', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x64', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'g', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'l', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x84', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\x87', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x90', '\n', '\f', '\f', '\f', '\xE', '\f', '\x93', 
		'\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x9A', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xA2', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xA7', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\xC2', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\xCA', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x2', '\x4', '\x14', 
		'\x16', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', '\x5', '\x3', 
		'\x2', '\n', '\v', '\x3', '\x2', '\f', '\r', '\x3', '\x2', '\x10', '\x17', 
		'\x2', '\xCB', '\x2', '\x39', '\x3', '\x2', '\x2', '\x2', '\x4', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'K', '\x3', '\x2', '\x2', '\x2', '\n', 'P', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'k', '\x3', '\x2', '\x2', '\x2', '\xE', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'r', '\x3', '\x2', '\x2', '\x2', '\x12', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '|', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x18', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xA1', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\"', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xAA', '\x3', '\x2', '\x2', '\x2', '&', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xAE', '\x3', '\x2', '\x2', '\x2', '*', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xB3', '\x3', '\x2', '\x2', '\x2', '.', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x34', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x38', '\x5', '\x4', '\x3', '\x2', '\x37', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', 
		'\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '<', '>', '\a', '\x2', '\x2', '\x3', '=', '<', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x6', '\x4', '\x2', '@', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x5', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x5', '\b', '\x5', '\x2', '\x45', '\x46', '\a', ' ', '\x2', '\x2', '\x46', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'G', 'L', '\x5', '*', '\x16', '\x2', 
		'H', 'L', '\x5', '.', '\x18', '\x2', 'I', 'L', '\x5', '\f', '\a', '\x2', 
		'J', 'L', '\x5', '\x30', '\x19', '\x2', 'K', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'O', '\a', ' ', '\x2', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'W', '\a', '\a', 
		'\x2', '\x2', 'T', 'V', '\a', ' ', '\x2', '\x2', 'U', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '^', '\x5', '\x4', 
		'\x3', '\x2', '[', ']', '\a', ' ', '\x2', '\x2', '\\', '[', '\x3', '\x2', 
		'\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x65', '\a', '\b', '\x2', '\x2', '\x62', '\x64', '\a', ' ', '\x2', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\v', '\x3', '\x2', '\x2', '\x2', 
		'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 'l', '\x5', '\xE', '\b', 
		'\x2', 'i', 'l', '\x5', '\x10', '\t', '\x2', 'j', 'l', '\x5', '\x12', 
		'\n', '\x2', 'k', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'n', '\a', '\x5', '\x2', '\x2', 'n', 'o', '\a', 
		'\xE', '\x2', '\x2', 'o', 'p', '\x5', ' ', '\x11', '\x2', 'p', 'q', '\a', 
		'\xF', '\x2', '\x2', 'q', '\xF', '\x3', '\x2', '\x2', '\x2', 'r', 's', 
		'\a', '\x5', '\x2', '\x2', 's', 't', '\a', '\xE', '\x2', '\x2', 't', 'u', 
		'\x5', '(', '\x15', '\x2', 'u', 'v', '\a', '\xF', '\x2', '\x2', 'v', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x5', '\x2', '\x2', 'x', 
		'y', '\a', '\xE', '\x2', '\x2', 'y', 'z', '\x5', '\x14', '\v', '\x2', 
		'z', '{', '\a', '\xF', '\x2', '\x2', '{', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\b', '\v', '\x1', '\x2', '}', '~', '\x5', '\x16', '\f', 
		'\x2', '~', '\x85', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\f', 
		'\x4', '\x2', '\x2', '\x80', '\x81', '\x5', '\x1A', '\xE', '\x2', '\x81', 
		'\x82', '\x5', '\x16', '\f', '\x2', '\x82', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\b', 
		'\f', '\x1', '\x2', '\x89', '\x8A', '\x5', '\x1E', '\x10', '\x2', '\x8A', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\f', '\x4', '\x2', 
		'\x2', '\x8C', '\x8D', '\x5', '\x1C', '\xF', '\x2', '\x8D', '\x8E', '\x5', 
		'\x1E', '\x10', '\x2', '\x8E', '\x90', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x17', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x5', '\x14', '\v', 
		'\x2', '\x95', '\x96', '\x5', ',', '\x17', '\x2', '\x96', '\x97', '\x5', 
		'\x18', '\r', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x9A', '\x5', '\x14', '\v', '\x2', '\x99', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x9C', '\t', '\x2', '\x2', '\x2', '\x9C', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\t', '\x3', '\x2', 
		'\x2', '\x9E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x5', 
		' ', '\x11', '\x2', '\xA0', '\xA2', '\x5', '(', '\x15', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA7', '\x5', 
		'\"', '\x12', '\x2', '\xA4', '\xA7', '\x5', '$', '\x13', '\x2', '\xA5', 
		'\xA7', '\x5', '&', '\x14', '\x2', '\xA6', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '!', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\a', '\x1A', '\x2', '\x2', '\xA9', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\x1F', '\x2', '\x2', '\xAB', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', '\x1D', '\x2', '\x2', '\xAD', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '\x1E', '\x2', 
		'\x2', '\xAF', ')', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x6', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x1E', '\x2', '\x2', '\xB2', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\t', '\x4', '\x2', '\x2', 
		'\xB4', '-', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x5', '*', '\x16', 
		'\x2', '\xB6', '\xB7', '\a', '\t', '\x2', '\x2', '\xB7', '\xB8', '\x5', 
		'\x14', '\v', '\x2', '\xB8', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x5', '*', '\x16', '\x2', '\xBA', '\xBB', '\a', '\t', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\x18', '\r', '\x2', '\xBC', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x5', '*', '\x16', '\x2', '\xBE', 
		'\xBF', '\a', '\t', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x1E', '\x10', 
		'\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC2', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', '\x1B', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\xE', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x32', '\x1A', '\x2', '\xC6', 
		'\xC7', '\a', '\xF', '\x2', '\x2', '\xC7', '\xC9', '\x5', '\n', '\x6', 
		'\x2', '\xC8', '\xCA', '\x5', '\x34', '\x1B', '\x2', '\xC9', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\x5', '\x18', '\r', 
		'\x2', '\xCC', '\x33', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\a', 
		'\x1C', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\n', '\x6', '\x2', '\xCF', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x12', '\x39', '=', '\x42', 'K', 
		'P', 'W', '^', '\x65', 'k', '\x85', '\x91', '\x99', '\xA1', '\xA6', '\xC1', 
		'\xC9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
